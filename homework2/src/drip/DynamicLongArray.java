package drip;

public interface DynamicLongArray {
    /**
     * Возвращает количество элементов в массиве.
     *
     * @return количество элементов в массиве
     */
    int size();

    /**
     * Проверяет, является ли массив пустым.
     *
     * @return true, если массив пуст, иначе false
     */
    boolean isEmpty();

    /**
     * Проверяет, содержит ли массив указанный элемент.
     *
     * @param element элемент для проверки
     * @return true, если элемент присутствует в массиве, иначе false
     */
    boolean contains(int element);

    /**
     * Добавляет указанный элемент в конец массива.
     *
     * @param e элемент для добавления
     * @return true, если элемент был успешно добавлен
     */
    boolean add(int e);

    /**
     * Проверяет, содержит ли массив все элементы указанной коллекции.
     *
     * @param c коллекция для проверки
     * @return true, если массив содержит все элементы коллекции, иначе false
     */
    boolean containsAll(DynamicLongArray c);

    /**
     * Добавляет все элементы указанной коллекции в конец массива.
     *
     * @param c коллекция элементов для добавления
     * @return true, если массив был изменен как результат операции
     */
    boolean addAll(DynamicLongArray c);

    /**
     * Вставляет все элементы указанной коллекции в массив, начиная с указанного индекса.
     *
     * @param index индекс, начиная с которого вставляются элементы
     * @param c коллекция элементов для добавления
     * @return true, если массив был изменен как результат операции
     */
    boolean addAll(int index, DynamicLongArray c);

    /**
     * Удаляет из массива все элементы, присутствующие в указанной коллекции.
     *
     * @param c коллекция элементов для удаления
     * @return true, если массив был изменен как результат операции
     */
    boolean removeAll(DynamicLongArray c);

    /**
     * Оставляет в массиве только те элементы, которые присутствуют в указанной коллекции.
     *
     * @param c коллекция элементов для оставления
     * @return true, если массив был изменен как результат операции
     */
    boolean retainAll(DynamicLongArray c);

    /**
     * Сортирует элементы массива в естественном порядке.
     */
    default void sort() {
        // Default implementation can be provided here if needed
    }

    /**
     * Удаляет все элементы из массива.
     */
    void clear();

    /**
     * Возвращает элемент по указанному индексу.
     *
     * @param index индекс элемента
     * @return элемент по указанному индексу
     * @throws IndexOutOfBoundsException если индекс выходит за пределы массива
     */
    int get(int index);

    /**
     * Заменяет элемент по указанному индексу на новый элемент.
     *
     * @param index индекс элемента для замены
     * @param element новый элемент
     * @return предыдущий элемент по указанному индексу
     * @throws IndexOutOfBoundsException если индекс выходит за пределы массива
     */
    int set(int index, int element);

    /**
     * Вставляет элемент в массив по указанному индексу.
     *
     * @param index индекс для вставки элемента
     * @param element элемент для вставки
     * @throws IndexOutOfBoundsException если индекс выходит за пределы массива
     */
    void add(int index, int element);

    /**
     * Удаляет элемент по указанному индексу из массива.
     *
     * @param index индекс элемента для удаления
     * @return удаленный элемент
     * @throws IndexOutOfBoundsException если индекс выходит за пределы массива
     */
    long remove(int index);

    /**
     * Возвращает индекс первого вхождения указанного элемента в массиве.
     *
     * @param element элемент для поиска
     */
    void indexOf(int element);

    /**
     * Возвращает индекс последнего вхождения указанного элемента в массиве.
     *
     * @param element элемент для поиска
     * @return индекс последнего вхождения элемента, или -1, если элемент не найден
     */
    int lastIndexOf(int element);
}
